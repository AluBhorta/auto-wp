import * as aws from "@pulumi/aws";
import { auto_wp_efs } from "./efs";

export const auto_wp_taskdef = new aws.ecs.TaskDefinition("auto_wp_taskdef", {
  cpu: "512",
  family: "auto_wp_taskdef",
  memory: "1024",
  networkMode: "awsvpc",
  executionRoleArn: "arn:aws:iam::665186350589:role/ecsTaskExecutionRole",
  requiresCompatibilities: ["FARGATE"],
  tags: { Project: "auto-wp" },
  volumes: [
    {
      name: "site_root",
      efsVolumeConfiguration: {
        fileSystemId: auto_wp_efs.id,
        rootDirectory: "/",
        transitEncryption: "ENABLED",
        transitEncryptionPort: 2999,
      },
    },
  ],
  ephemeralStorage: {
    sizeInGib: 21,
  },
  containerDefinitions: JSON.stringify([
    {
      command: [],
      cpu: 0,
      dnsSearchDomains: [],
      dnsServers: [],
      dockerLabels: {},
      dockerSecurityOptions: [],
      entryPoint: [],
      environment: [
        { name: "AUTH_KEY", value: process.env.AUTH_KEY },
        { name: "AUTH_SALT", value: process.env.AUTH_SALT },
        { name: "DB_HOST", value: process.env.DB_HOST },
        { name: "DB_NAME", value: process.env.DB_NAME },
        { name: "DB_PASSWORD", value: process.env.DB_PASSWORD },
        { name: "DB_USER", value: process.env.DB_USER },
        { name: "ENV", value: process.env.ENV },
        { name: "FQDN", value: process.env.FQDN },
        { name: "LOGGED_IN_KEY", value: process.env.LOGGED_IN_KEY },
        { name: "LOGGED_IN_SALT", value: process.env.LOGGED_IN_SALT },
        { name: "NONCE_KEY", value: process.env.NONCE_KEY },
        { name: "NONCE_SALT", value: process.env.NONCE_SALT },
        { name: "SECURE_AUTH_KEY", value: process.env.SECURE_AUTH_KEY },
        { name: "SECURE_AUTH_SALT", value: process.env.SECURE_AUTH_SALT },
        { name: "WP_ENV", value: process.env.WP_ENV },
        { name: "WP_HOME", value: process.env.WP_HOME },
        { name: "WP_SITEURL", value: process.env.WP_SITEURL },
      ],
      environmentFiles: [],
      essential: true,
      extraHosts: [],
      image: "665186350589.dkr.ecr.ap-south-1.amazonaws.com/auto-wp",
      links: [],
      logConfiguration: {
        logDriver: "awslogs",
        options: {
          "awslogs-create-group": "true",
          "awslogs-group": "/ecs/auto_wp_taskdef",
          "awslogs-region": "ap-south-1",
          "awslogs-stream-prefix": "ecs",
        },
        secretOptions: [],
      },
      mountPoints: [
        {
          containerPath: "/var/www/html",
          readOnly: false,
          sourceVolume: "site_root",
        },
      ],
      name: "auto-wp",
      portMappings: [{ containerPort: 80, hostPort: 80, protocol: "tcp" }],
      secrets: [],
      systemControls: [],
      ulimits: [],
      volumesFrom: [],
    },
    {
      command: [],
      cpu: 512,
      dnsSearchDomains: [],
      dnsServers: [],
      dockerLabels: {},
      dockerSecurityOptions: [],
      entryPoint: [],
      environment: [],
      environmentFiles: [],
      essential: false,
      extraHosts: [],
      image: "docker.io/library/redis:alpine",
      links: [],
      logConfiguration: {
        logDriver: "awslogs",
        options: {
          "awslogs-create-group": "true",
          "awslogs-group": "/ecs/auto_wp_taskdef",
          "awslogs-region": "ap-south-1",
          "awslogs-stream-prefix": "ecs",
        },
        secretOptions: [],
      },
      mountPoints: [],
      name: "redis",
      portMappings: [{ containerPort: 6379, hostPort: 6379, protocol: "tcp" }],
      secrets: [],
      systemControls: [],
      ulimits: [],
      volumesFrom: [],
    },
    {
      command: ["--config=/etc/ecs/ecs-xray.yaml"],
      cpu: 0,
      dnsSearchDomains: [],
      dnsServers: [],
      dockerLabels: {},
      dockerSecurityOptions: [],
      entryPoint: [],
      environment: [],
      environmentFiles: [],
      essential: true,
      extraHosts: [],
      image: "public.ecr.aws/aws-observability/aws-otel-collector:v0.14.1",
      links: [],
      logConfiguration: {
        logDriver: "awslogs",
        options: {
          "awslogs-create-group": "true",
          "awslogs-group": "/ecs/ecs-aws-otel-sidecar-collector",
          "awslogs-region": "ap-south-1",
          "awslogs-stream-prefix": "ecs",
        },
        secretOptions: [],
      },
      mountPoints: [],
      name: "aws-otel-collector",
      portMappings: [],
      secrets: [],
      systemControls: [],
      ulimits: [],
      volumesFrom: [],
    },
  ]),
});
